// Данная программа выведет: [b b a][a a].

// Это происходит из-за того, как работает передача аргументов в функции и работа со срезами в Go.

// Внутри функции, которая передается в качестве аргумента, создается локальная копия среза slice.
// Эта локальная копия ссылается на те же данные, что и исходный срез, но сам срез slice внутри функции является отдельным срезом с собственным указателем на массив данных.

// Внутри этой функции выполняется append(slice, "a").
// Эта операция добавляет новый элемент "a" в локальную копию среза, но она не изменяет оригинальный срез slice за пределами функции main.

// Затем выполняется присваивание slice[0] = "b" и slice[1] = "b".
// Это изменяет элементы локальной копии среза внутри функции.

// После того как функция завершается, она больше не имеет доступа к локальной копии среза, и все ее изменения остаются внутри функции.
//
// В итоге, когда fmt.Print(slice) выполняется внутри main, он выводит оригинальный срез slice, который остался неизменным.
// Поэтому первый вывод показывает ["b", "b", "a"], а второй вывод показывает исходный срез ["a", "a"].

package main

import (
	"fmt"
)

// Пример исправленной программы:
func main() {
	slice := []string{"a", "a"}

	func(slice *[]string) {
		*slice = append(*slice, "a")
		(*slice)[0] = "b"
		(*slice)[1] = "b"
		fmt.Print(*slice)
	}(&slice)
	fmt.Print(slice)
}
