package main

import "sync"

/*Mutex (полный блокировщик):

Mutex обеспечивает эксклюзивный доступ к разделяемому ресурсу.
Это означает, что только один поток может захватить мьютекс и получить доступ к ресурсу.
Если другой поток попытается захватить мьютекс, пока он уже заблокирован другим потоком, он будет заблокирован до тех пор, пока первый поток не освободит мьютекс.

Используйте Mutex, если вам нужна полная эксклюзивность при доступе к ресурсу, и только один поток должен иметь к нему доступ в любой момент времени.
Используйте RWMutex, если доступ к ресурсу разделен на операции чтения и записи, и вы хотите допустить одновременные операции чтения, но с блокировкой записи.
Пример:
*/

var mutex sync.Mutex
var rwMutex sync.RWMutex

func main() {
	// Поток 1
	mutex.Lock()
	// Операции записи/чтения
	mutex.Unlock()

	// Поток 2
	mutex.Lock() // Заблокирован до освобождения мьютекса потоком 1
	// Операции записи/чтения
	mutex.Unlock()

	// Поток 1 (Чтение)
	rwMutex.RLock()
	// Операции чтения
	rwMutex.RUnlock()

	// Поток 2 (Чтение)
	rwMutex.RLock()
	// Операции чтения
	rwMutex.RUnlock()

	// Поток 3 (Запись)
	rwMutex.Lock()
	// Операции записи
	rwMutex.Unlock()
}
